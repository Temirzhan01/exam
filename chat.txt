package main

import (
	"fmt"
	"halykbpm-git.homebank.kz/business-processes/compraIP/app"
	"halykbpm-git.homebank.kz/business-processes/compraIP/config"
	"halykbpm-git.homebank.kz/business-processes/compraIP/docs"
	"os"
)

func main() {
	configs := config.New("config.json")
	if os.Getenv("APP_MODE") == "development" {
		docs.SwaggerInfo.Host = fmt.Sprintf("localhost:%d", configs.ServerPort)
	}
	app.Start(configs)
}


package app

import (
	"fmt"
	"net"
	"net/http"
	"time"

	"halykbpm-git.homebank.kz/business-processes/compraIP/config"
	"halykbpm-git.homebank.kz/business-processes/compraIP/handler"
	"halykbpm-git.homebank.kz/business-processes/compraIP/repository/taxes"
	"halykbpm-git.homebank.kz/business-processes/compraIP/router"
	"halykbpm-git.homebank.kz/business-processes/compraIP/service"
	"halykbpm-git.homebank.kz/business-processes/compraIP/util/logger"
)

//Start ...
func Start(config *config.Config) {
	log := logger.NewLogger(config.ESURL, config.LogLevel)

	tout := time.Duration(config.ServiceTimeoutSeconds) * time.Second
	var client *http.Client
	var defaultTransport http.RoundTripper = &http.Transport{
		Proxy: http.ProxyFromEnvironment,
		DialContext: (&net.Dialer{
			Timeout:   10 * time.Second,
			KeepAlive: 10 * time.Second,
			DualStack: true,
		}).DialContext,
		ForceAttemptHTTP2:     true,
		MaxIdleConns:          200,
		MaxIdleConnsPerHost:   100,
		IdleConnTimeout:       30 * time.Second,
		TLSHandshakeTimeout:   10 * time.Second,
		ExpectContinueTimeout: 1 * time.Second,
		MaxConnsPerHost:       30,
	}
	if config.LogServiceRequests && !config.ReleaseMode {
		client = &http.Client{
			Transport: logger.NewLoggedRoundTripper(http.DefaultTransport, logger.NewDefaultLogger()),
			Timeout:   tout,
		}
	} else {
		client = &http.Client{
			Transport: defaultTransport,
			Timeout:   tout,
		}
	}

	store := taxes.New(service.NewCompraService(log, config, service.WithHTTPClient(client)))

	h := handler.NewHandler(store, config, log)
	r := router.InitRouter(h, config.ReleaseMode)

	log.Info("compraIP", "START", "Starting", "", "", "", "", nil)
	if err := r.Run(fmt.Sprintf(":%d", config.ServerPort)); err != nil {
		log.Fatal("compraIP", "START", -1, "Failed start server", "", "", "", "", nil)
	}
}


package config

import (
	"github.com/spf13/viper"
	"log"
)

// Config ...
type Config struct {
	ServerPort            int    `json:"serverPort"`
	ReleaseMode           bool   `json:"releaseMode"`
	ServiceTimeoutSeconds int    `json:"serviceTimeoutSeconds"`
	LogLevel              string `json:"logLevel"`
	LogServiceRequests    bool   `json:"logServiceRequests"`
	CompraUrl             string `json:"compraUrl"`
	ESURL                 string `json:"ESURL"`
	CompraAuthToken       string `json:"compraAuthToken"`
}

func New(path string) *Config {
	viper.SetConfigFile(path)
	viper.AutomaticEnv()

	if err := viper.ReadInConfig(); err != nil {
		log.Fatalf("Error reading config file, %s", err)
	}

	var config Config
	if err := viper.Unmarshal(&config); err != nil {
		log.Fatalf("Unable to decode into struct, %v", err)
	}

	return &config
}


package router

import (
	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	_ "halykbpm-git.homebank.kz/business-processes/compraIP/docs"
	"halykbpm-git.homebank.kz/business-processes/compraIP/handler"
	"io/ioutil"
)

// InitRouter initialize routing information
func InitRouter(h *handler.Handler, production bool) *gin.Engine {
	if production {
		gin.SetMode(gin.ReleaseMode)
		gin.DefaultWriter = ioutil.Discard
	}
	r := gin.Default()
	if !production {
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	}
	r.GET("/getTaxes", h.CheckIP)
	r.GET("/getTaxes", h.GetCheckResults)
	r.GET("/healthz")

	return r
}
